@startuml

' Интерфейсы
interface UserActions {
  +authorize(username: String, password: String): boolean
  +selectRoute(routeId: String, time: DateTime): boolean
  +checkTicketAvailability(): boolean
  +checkFunds(): boolean
}

interface TicketActions {
  +reserveTicket(): boolean
  +deductFunds(): boolean
  +confirmPurchase(): boolean
  +updateTicketAvailability(): void
  +cancelReservation(): boolean
}
' Классы и операции
' класс, представляющий пользователя системы.
class User implements UserActions{
  ' методы предусловия:
  +authorize(username: String, password: String): boolean
  +selectRoute(routeId: String, time: DateTime): boolean
  +checkTicketAvailability(): boolean
  +checkFunds(): boolean

  ' методы постусловия:
  +reserveTicket(): boolean
  +deductFunds(): boolean
  +confirmPurchase(): boolean
  +updateTicketAvailability(): void
  +cancelReservation(): boolean
}


' Абстрактный класс и наследование

abstract class Ticket implements TicketActions {
  +routeId: String
  +departureTime: DateTime
  +arrivedTime: DateTime
  +seatQty: Integer
  +price: Money
}

TicketActions <|.. Ticket : implements
User --|> BusTicket : uses

class BusTicket extends Ticket {
  +number: int
  +routeId: String
  +departureTime: DateTime
  +price: Money
}

BusTicket --|> Ticket : extends

' Предусловия

User --> User : authorize(username, password)
User --> User : selectRoute(routeId, time)
User --> User : checkTicketAvailability()
User --> User : checkFunds()

User --> BusTicket : reserveTicket()

' Постусловия

User --> User : deductFunds()
User --> User : confirmPurchase()
User --> BusTicket : updateTicketAvailability()

User --> User : cancelReservation()

' Инварианты (условие, которое должно быть истино на протяжении
' выполнения какой-то операции)

User --> User : [invariant] Funds >= BusTicket. Price
BusTicket --> [invariant] BusTicket : Price > 0
Ticket --> [invariant] Ticket : Price > 0
BusTicket --> [invariant] BusTicket : SeatQty >= RequestQty


@enduml